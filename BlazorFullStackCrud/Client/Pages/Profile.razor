@page "/profile"
@using BlazorFullStackCrud.Client.Services
@using BlazorFullStackCrud.Shared
@using System.Security.Claims
@inject IProfileService ProfileService
@inject NavigationManager NavigationManager

<h2><b>Profile</b></h2> 
<hr />

<EditForm Model="ProfileService">

    <div>
        <img src="@ProfileService.ProfilePicUrl" style="width: 250px; height: 250px; border-radius: 10px;"/> <br /> <br />
        <InputFile OnChange="@OnInputFileChanged"></InputFile>
    </div>
    <br />

    <div>
        <lable for="Username">Username</lable>
        <InputText @bind-Value="ProfileService.UserName" class="form-control" placeholder="first name"></InputText>
    </div>
    <br />

    <div>
        <lable for="Email">Email Address</lable>
        <InputText @bind-Value="ProfileService.Email" class="form-control" placeholder="email address"></InputText>
    </div>
    <br />

    <div>
        <lable for="heroname">Password</lable>
        <InputText @bind-Value="ProfileService.Password" class="form-control" placeholder="Password"></InputText>
    </div>
    <br />

    <button class="btn btn-primary" @onclick="ProfileService.UpdateProfile">Update Profile</button>
    <span>&nbsp;&nbsp;</span>@ProfileService.Message

    <br />
    <br />

</EditForm>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        // Get the file
        var file = inputFileChangeEvent.File;

        // Read the file in a byte array
        var buffer = new byte[file.Size];
        await file.OpenReadStream(1512000).ReadAsync(buffer);

        // Convert byte array to base 64 string
        ProfileService.ProfilePicUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";

    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState; //_authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if(user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            ProfileService.Id = Convert.ToInt32(claim?.Value);
            await ProfileService.GetProfile();
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}